# < 리스트 >
# 집합적 자료형 (여러 개의 원소를 가지는 데이터)
# 가변적 - 삽입 삭제 변경
# 다양한 형식의 데이터 : 숫자, 문자열, 논리 혼재되어 저장 가능
# 리스트 : [] 대괄호 이용하여 생성
score = [32,56,64,72,12]
print(type(score))
print(score)
print('----------------------------------------')

# 1. 리스트 생성
list1  = [] #빈 리스트로 생성
list2 = list()  #list() 함수 이용하여 리스트 생성
list3 = [1,2,3] #초기화하면서 리스트 생성
list4 = [1, 'apple', 3.5, [10,20,30], True] #서로 다른 형식의 값들도 저장 가능

print('list1: %s' % list1)
print('list2(%s): %s' % (type(list2),list2))
print('list3: %s' % list3)
print('list4: %s' % list4)
print('list4의 길이 : %s' % len(list4) )
print('----------------------------------------')

# 2.리스트 요소 출력
for l in list4:
    print(l,end=" : ")
    print(type(l))
print('----------------------------------------')

# 3. 리스트의 길이 len(리스트이름) 함수 이용하여 출력
#    리스트 인덱싱 : 리스트의 인덱스를 이용하여 접근 : 리스트명[indexId]
for i in range(0, len(list4)):
    print(list4[i], end=' : ')
    print(type(list4[i]))
print('----------------------------------------')

nums = [1,2,3]
a,b,c = nums #길이가 같다면 a,b,c에 하나씩 대응됨
print(a,b,c)
print('----------------------------------------')

# 리스트 인덱싱(indexing)
#  리스트에서 인덱스 연산자를 통하여 요소를 참조하고 접근하는 것

a = [1, 'apple', 3.5, [10,20,30], True]
print('a[0] :',a[0])  #첫번째 요소
print('a[-1] :',a[-1])  #마지막 요소
print('a[-5] :',a[-5])  #첫번째 요소
print('a[3] :',a[3]) #세번째 요소
print('a[3][0] :',a[3][0]) #세번째 요소_[0]
print('a[3][1] :',a[3][1]) #세번째 요소_[1]
print('a[3][2] :',a[3][2]) #세번째 요소_[2]
print('a[3][-1] :',a[3][-1]) #세번째 요소_[2]
print('----------------------------------------')

b = ['apple','banana','melon']
c = [a,b]
print(c)
print('c[0][3][1] :',c[0][3][1]) #20
print('----------------------------------------')
# 리스트의 슬라이싱 (slicing)
# 슬라이싱 연산 결과는 리스트 반환
# [start : end]
print(a[:])
print(a[3:])
print(a[:3])
print(a[2:4])
print(a[-1:])
print(a[:-1])

















