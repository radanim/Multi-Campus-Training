#!/usr/bin/env python
# coding: utf-8

# # pandas 데이터프레임 인덱서

# In[1]:


# 모듈 import
import numpy as np
import pandas as pd


# ##### 설정변경코드
# * 변수 명이 두 번 이상 출력되어도 모두 콘솔에서 보여줄 것
# * 
# from IPython.core.interactiveshell import InteractiveShell <br> 
# InteractiveShell.ast_node_interactivity="all"
# * InteractiveShell.ast_node_interactivity : 'all' | 'last' | 'last_expr' | 'none' (기본값은 'last_expr')

# In[2]:


from IPython.core.interactiveshell import InteractiveShell
InteractiveShell.ast_node_interactivity="all"


# ## 데이터 프레임 인덱서 : loc, iloc
# 
# - Pandas는 numpy행렬과 같이 쉼표를 사용한 (행 인덱스, 열 인덱스) 형식의 2차원 인덱싱을 지원
#     - 특별한 인덱서(indexer) 속성을 제공
#     
# * loc : 라벨값 기반의 2차원 인덱싱
# * iloc : 순서를 나타내는 정수 기반의 2차원 인덱싱

# ### 데이터프레임 인덱싱
# 
# 1. 열인덱싱 
#     - 하나의 열만 선택 : df['열이름'] 
#     - 여러개 열 선택 : df[['열이름1', '열이름2',...]] 
# 
# 
# 2. 행인덱싱 : 연속된 구간의 행데이터 선택(슬라이싱)
#     - df['행_시작위치':'행_끝위치'] : 
# 
# 
# 3. 개별요소 접근 : 선택한 열에서 지정된 구간의 행데이터 선택
#     - df['열이름']['행_시작위치':'행_끝위치']
#     - df['열이름']['시작_행이름':'끝_행이름']
#     
#     
# => 행과 열을 동시에 인덱싱 하는 구조는 기본 자료구조 인덱스와 차이가 있음

# ### 데이터 프레임에서 인덱서 사용
# 
# #### loc, iloc 속성을 사용하는 인덱싱
# 
# - **pandas 패키지는 [행번호,열번호] 인덱싱 불가**
# 
# - iloc 속성 사용하면 가능
#     - iloc[행번호,열번호] : 가능
#     - loc[행제목,열제목] : 가능

# ## 1. loc 인덱서 (행 우선 인덱서)
# 
# - df.loc[행인덱싱 값]   # 행우선 인덱서
# - df.loc[행인덱싱 값,열인덱싱 값]

# #### 인덱싱 값
# 1. 인덱스 데이터 : (index name, column name)
# 2. 인덱스 데이터 슬라이스
# 3. 같은 행 인덱스를 갖는 불리언 시리즈(행 인덱싱인 경우)
#    - 조건으로 추출 가능
# 4. 위 값을 반환하는 함수    

# - 예제 df 생성
# : 10 ~ 21 범위의 숫자를 생성 후 3행 4열로 배치

# In[3]:


# 예제 데이터프레임 생성
df = pd.DataFrame(np.arange(10,22).reshape(3,4),
                 index='a b c'.split(),
                 columns = 'A B C D'.split())
df


# 문제1. 행우선 인덱서 이므로 a행 모든 열을 추출하시오.

# In[4]:


# loc 인덱서 : 인덱싱 값을 하나만 받는 경우
df.loc['a']

# 출력결과 : 시리즈로 반환


# * loc 인덱서에서는 열 단독 인덱싱은 불가능 함

# 문제. A열의 모든 행을 출력하시오

# In[5]:


# 에러 예제
df.loc['A']


# => A행이 없으므로 key error 가 발생

# **행이름 문자열 라벨 슬라이싱**
# 
# - dataFrame.loc[처음문자열제목 : 끝문자열제목]

# b행부터 c행의 모든 열 반환

# In[6]:


df.loc['b':'c']


# In[7]:


# 위 결과와 동일한 결과 출력
df['b':'c']


# - dataFrame[[행이름1, 행이름2,... ]]
#     - 여러 행 선택시 인덱서 데이터를 리스트로 사용
#     - 반환값이 데이터프레임이 됨

# In[8]:


df.loc[['b','c']]


# In[9]:


df.loc[['a','c']]


# In[10]:


# b행을 출력 : 시리즈 형태
df.loc['b']


# In[11]:


# b행을 출력 : df 형태
df.loc[['b']]


# *참고 : 데이터프레임 기본 인덱싱  => 열기준

# In[12]:


df[['b','c']]


# => b와 c를 컬럼명에서 찾고 있음, 인덱서 사용해야 함

# In[13]:


# 컬럼명에 B,C가 존재
df[['B','C']]


# ### boolean selection으로 row 선택하기

# - 데이터베이스와 같은 인덱스를 가지는 boolean selection을 행을 선택하는 인덱싱 값으로 쓸 수 있음
#     - 조건 식 수행

# In[14]:


df


# - df의 A열의 값이 15보다 큰 행만 추출

# In[15]:


df.A > 15


# => df의 A열의 행값이 15보다 큰지 확인 후 T/F로 반환

# In[16]:


df.loc[df.A > 15]


# In[17]:


df[df.A > 15]


# - 인덱스 대신 인덱스 값을 반환하는 함수 사용

# In[19]:


# 함수 작성
def sel_row(df):
    return df.A > 15

# True 나 False 가 반환


# In[20]:


# 함수 호출 인덱싱
sel_row(df)


# In[21]:


df.loc[sel_row(df)]


# ### loc 인덱서 슬라이싱

# In[22]:


#예제 df 생성
df2 = pd.DataFrame(np.arange(10,26).reshape(4,4),
                  columns=['a','b','c','d'])
df2
#행 인덱스 지정하지 않아서 0부터 1씩 증가되는 정수 인덱스 자동 생성


# In[23]:


# 값 인덱싱 - 슬라이싱 초기값:끝값
df2.loc[1:2]


# In[24]:


# 위치 인덱싱 - 슬라이싱 초기위치:끝위치 + 1
df2[1:2]


# ### loc 인덱서 사용 요소 값 접근
# - 인덱싱으로 행과 열을 모두 받는 경우
# - 문법 : df.loc[행인덱스, 열인덱스] - 라벨(문자열)인덱스 사용

# In[25]:


df


# - a행의 A열 값을 접근해서 출력

# In[26]:


# a행의 A열 
df.loc['a','A']


# - a행의 A열 값 수정

# In[28]:


# loc를 사용한 원소값 변경
# df.loc[행,열]=값
df.loc['a','A']=50
df


# ### loc를 이용한 indexing 연습

# In[29]:


df


# 1. a행의 모든 열 반환하시오.

# In[30]:


df.loc['a']  # 시리즈로 반환


# In[31]:


df.loc[['a']] # 데이터프레임으로 반환


# In[32]:


df.loc['a',:]  # 시리즈로 반환


# 2. a행의 B,C 열을 반환하시오.

# In[33]:


# 시리즈로 반환 - 열에 해당하는 인덱싱을 슬라이싱 처리함
df
df.loc['a','B':'C']


# 3. b행부터 모든 행의 A열을 반환하시오.

# In[34]:


# b행부터 모든 행의 A열
df.loc['b':,'A']

#시리즈 형태 반환


# 4. a,b행의 B,D열을 데이터프레임으로 반환하시오.

# In[35]:


df


# In[41]:


df.loc['a':'b']  # a,b행의 모든열 df 형태로 반환
df.loc[['a','b']]# a,b행의 모든열 df 형태로 반환
df.loc[['a','b'],'B'] # a,b행의 B열을 시리즈 반환
df.loc['a':'b','B']   # a,b행의 B열을 시리즈 반환
df.loc['a':'b',['B','D']] # a,b행의 B,D열을 df로 반환
df.loc[['a','b'],['B','D']] # a,b행의 B,D열을 df로 반환


# In[43]:


df.loc[:"b","B":"D"]


# 5. a,c 행의 B,D열을 반환하시오.

# In[42]:


# df 데이터프레임의 a,c 행의 B,D열을 출력하시오.(df로 반환)
df.loc[['a','c'],['B','D']]


# ## 2. iloc 인덱서(위치 인덱스)
# - 라벨(name)이 아닌 위치를 나타내는 정수 인덱스만 받는다.
# - 위치 정수값은 0부터 시작
# - 데이터프레임.iloc[행,열]

# In[44]:


df


# - 0행 1열 선택

# In[45]:


# 0행 1열
df.iloc[0,1]


# - 1열의 0행,1행 선택 : 데이터프레임 형태로 반환

# In[46]:


# 0행 1열 : df 형태로 반환-슬라이싱 사용
df.iloc[0:2,1:2]


# - 1열의 0행,1행 선택 : 시리즈 형태로 반환

# In[47]:


# 0행 1열: 시리즈 형태로 반환 - 슬라이싱,위치값 사용
df.iloc[0:2,1]


# - 0행의 2번째 열부터 끝열까지 반환

# In[48]:


# 0행의 2번째열부터 끝열까지 반환
df.iloc[0,2:]


# In[51]:


# 0행의 끝에서 두번째 열 이후 까지 반환
df
df.iloc[0, -2:]  # 시리즈 형태로 반환
df.iloc[0:1, -2:] # 데이터프레임 형태로 반환


# - iloc[행위치,열위치] -> 원소값 반환
# - iloc[행위치1:행위치2,열위치1:열위치2] -> 원소 반환: df 반환
# - iloc[행위치,열위치1:열위치2] -> 원소반환 :시리즈 반환
# - iloc[행위치1:행위치2,열위치] ->원소반환 : 시리즈 반환

# ### 연습문제
# 1. 모든 행과 열에 라벨을 가지는 5*5 이상 크기의 데이터 프레임을 만든다.
#     - 최대한 간단한 코드로 작성-np의 난수 발생 함수 이용
#     
#     
# 2. 10가지 이상의 방법으로 특정한 행과 열을 추출해 볼 것
#     - 2번 작업을 진행하면서 주석으로 추출하는 내용을 정리 할 것

# - 25,50 범위의 숫자를 생성 후 5행 5열로 배치

# In[53]:


df=pd.DataFrame(np.arange(25,50).reshape(5,5),
                index='a b c d e'.split(),
                columns = 'A B C D E'.split())


# In[54]:


df


# In[55]:


# A열 추출
df['A'] # 시리즈형태
df.loc[:]['A'] # 시리즈형태
df.loc[:,:'A'] # 데이터프레임 형태
df.iloc[:,:1] # 데이터프레임 형태
df.iloc[:,0] # 시리즈형태


# In[57]:


# 0행부터 2행까지 추출
df.loc['a':'c']
df[0:3]
df.iloc[:3,:]


# In[59]:


# 1행의 3,4열 추출
df.iloc[[1],[3,4]]
df[['D','E']][1:2]


# In[61]:


# a행에서 c행까지 중 B열과 D열 추출
df.loc[['a','b','c'], ['B','D']]
df.loc['a':'c', ['B','D']]
df.iloc[0:3, [1, 3]]
df.iloc[:3,[1,3]]


# In[43]:


# 인덱싱 예제
df["A"] #열 라벨 인덱싱, A열을 추출 - 시리즈
df[0:3] #0행부터 2행까지 추출-슬라이싱 사용(행인덱싱)
df["A"]["a"] #열행 인덱싱 - 원소값 a행 A열-열우선인덱싱
df.iloc[1,3:]#1행의 3,4열(D,E열)
df.loc["a":"c","B":"D"] #df로 반환(행,열 모두 슬라이싱처리)
df.iloc[-2:]#끝에서 두번째 행부터 마지막행까지 - df로 반환
df.loc["a","A":"B"] #시리즈로 반환
df.loc["a":"a","A":"B"]#df로 반환
df.iloc[-2:,-2:] #행,열 슬라이싱 처리 -df 형태로 나타남
df[:"b"]["A"] #시리즈 출력
df[:"b"][["A"]] #df 출력


# ## 원소 갯수 세기

# - 원소들을 분류하여 갯수를 세는 함수 :  value_counts()

# In[44]:


df = pd.DataFrame({'num_legs': [2, 4, 4, 6],
                   'num_wings': [2, 0, 0, 0]},
                  index=['falcon', 'dog', 'cat', 'ant'])
df


# In[45]:


df.value_counts()

